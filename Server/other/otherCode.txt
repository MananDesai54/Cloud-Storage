//s3 upload other method
const upload = multer({
    storage: multerS3({
        s3: S3,
        bucket: process.env.AWS_BUCKET_NAME,
        metadata: (req, file, cb) => {
            cb(null, { fieldName: file.fieldname });
        },
        key: (req, file, cb) => {
            cb(null, `${req.s3Key}.${path.extname(file.originalname)}`);
        }
    })
});

const singleFileUpload = upload.single('image');

const uploadToS3 = (req, res) => {
    req.s3Key = generateId();
    const downloadURL = `https://cloud-storage-uploads.s3.amazonaws.com/${req.s3Key}`;
    return new Promise((resolve, reject) => {
        return singleFileUpload(req, res, err => {
            if(err) return reject(err);
            return resolve(downloadURL);
        })
    })
}
//s3 upload code inside route
uploadToS3(req, res)
     .then(downloadURL => {
         console.log(downloadURL);
         return res.status(200).json({
             downloadURL
         })
     })
     .catch(err => {
         console.log(err);
         return res.redirect('/');
     })



//jwt
const payload = {
    user: {
        id: user.id
    }
}
jwt.sign(payload, process.env.JWT_SECRET_KEY, {
            expiresIn: '24hr'
        },(err, token) => {
            if(err) return res.status(500).json({
                error: 'Server error'
            });

            return res.status(200).json({
                user,
                token
            });
        })


//update user, update & delete profile
// if(!password) {
//     return res.status(400).json({
//         error: 'Please provide password.'
//     })
// }

// if(!user) {
//     res.status(404).json({
//         error: 'User not found.'
//     })
// }
// const isMatch = await bcrypt.compare(password, user.local.password);
// if(!isMatch) {
//     return res.status(400).json({
//         'error': 'Invalid Password'
//     })
// }

//s3 download list objects
// S3.deleteObject({ Bucket: process.env.AWS_BUCKET_NAME, Key: 'billyImage.jpg' }).promise().then((res) => console.log(res));

// S3.listObjectsV2({ Bucket: process.env.AWS_BUCKET_NAME }).promise()
//     .then(res => console.log(res));

//check folder permission
let folder, folderOwner;
    cloud.forEach((user, index) => {
      const isFolder = user.folders.find(
        (folder) => folder.id.toString() === id
      );
      if (isFolder) {
        folder = isFolder;
        folderOwner = user;
        return;
      }
    });
    if (folder) {
      console.log(folder.sharedWith);
      if (folderOwner.user.toString() === currentUser.id) {
        req.folder = folder;
        return next();
      } else if (folder.sharable) {
        if (
          folder.sharedWith.length === 0 ||
          folder.sharedWith.includes(currentUserDetails.email.value)
        ) {
          req.folder = folder;
          return next();
        } else {
          console.log("No permission");
          return res.status(401).json({
            error: "You have not permission to access this folder",
          });
        }
      } else {
        console.log("No permission");
        return res.status(401).json({
          error: "You have not permission to access this folder",
        });
      }
    } else {
      return res.status(404).json({
        message: "Folder not found",
      });
    }

//download file
// const data = S3.getObject({
    //   Bucket: process.env.AWS_BUCKET_NAME,
    //   Key: file.awsData.key,
    // });
    // const readableStream = data.createReadStream();
    // readableStream.on("error", (err) => {
    //   return res.status(500).json({
    //     error: err.message,
    //   });
    // });
    // readableStream.on("end", (data) => {
    //   console.log(data);
    //   return res.status(200).json({
    //     data: readableStream,
    //   });
    // });
    // return res.status(200).json({
    //   data: readableStream,
    // });

//register request
  // this.socialAuthService.authState.subscribe((user) => {
    //   this.user = user;
    //   console.log(this.user);
    //   fetch('http://localhost:5000/api/users', {
    //     method: 'POST',
    //     body: JSON.stringify({
    //       id: user.id,
    //       method: user.provider.toLowerCase(),
    //       username: user.name,
    //       email: user.email,
    //       profileUrl: user.photoUrl
    //     }),
    //     headers: {
    //       'Content-Type': 'application/json'
    //     }
    //   }).then(res => res.json())
    //     .then(data => console.log(data));
    // })